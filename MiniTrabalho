#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <stdbool.h>

// Tipo base dos elementos da lista 
typedef struct elementos {
    char placa[50];
} t_elemento;

typedef struct no {
    t_elemento dado;
    struct no * prox;
} t_no;

typedef struct fila {
    t_no* inicio;
    int quant_element;
    t_no* final;
} t_fila;

/**
 * Cria uma fila vazia, ou seja um no cabeca.
 * inicializa os ponteiros ini e fim para NULL,
 * e seta quant_element para zero.
 * 
 * @return no cabeca alocado e inicializado
 */
t_fila * criaCabeca ()
{
    t_fila * fila = (t_fila*) malloc(sizeof(t_fila));

    if (fila) {
        fila->inicio = fila->final = NULL;
        fila->quant_element=0;
    }

    return fila;
}
	t_fila * primeira_fila = criaCabeca();
	t_fila * segunda_fila = criaCabeca();

/**
 * Cria um novo no, aloca a sua regiao de memoria,
 * inicializa o ponteiro prox, e retorna o ponteiro para a pilha criada.
 * 
 * @return No alocada e inicializada
 */
t_no * criaNo() {
    t_no * no = (t_no*) malloc(sizeof(t_no));

    // verifica se houve memoria suficiente para alocar
    if (no)
        no->prox = NULL;

    return no;
}

/**
 * Verifica se a fila esta vazia ou nao. Isto so acontece quando ela eh nula
 * 
 * @param fila ponteiro para a fila
 *
 * @return Verdadeiro (1) se a fila estiver vazia, ou falso (0) caso contrario.
 */
int isVazia (t_fila * fila)
{
    return (fila->quant_element == 0);
}

/**
 * Insere um elemento (valor) no fim da fila.
 * 
 * @param fila ponteiro para a fila
 * @param valor  elemento a ser inserido na fila
 *
 * @return Falso(0) se a fila estiver cheia, caso contrario, retorna Verdadeiro(1).
 */
int inserir (t_fila *fila, t_elemento valor) {
    t_no *novo;
    novo = criaNo();
    if (novo == NULL)
        return 0; // Erro: memoria insuficiente
    novo->dado = valor;
    if (isVazia(fila))
        fila->inicio = novo;
    else
        (fila->final)->prox = novo;
    fila->final = novo;
    fila->quant_element++;
    return 1;
}

/**
 * Remove um elemento do inicio da fila.
 * 
 * @param fila ponteiro para a fila, a fila ja deve ter sido inicializada
 *
 * @return o elemento removido.
 */
t_elemento remover (t_fila *fila)
{
    t_no *aux;
    t_elemento valor = { "" } ;
    if (isVazia(fila))
        return valor; // Erro: fila vazia 
    valor = (fila->inicio)->dado;
    if (fila->inicio == fila->final)
        fila->final = NULL;
    aux = fila->inicio;
    fila->inicio = (fila->inicio)->prox;
    free(aux);
    fila->quant_element--;
    return valor;
}

void inserir_carro(int var){
	t_elemento t;
	
	if(var==0){
		printf("Voce nao adicionou em nenhuma fila!!!\n");	
	}
	
	if(var==1){
		printf("Digite a placa do carro que deseja colocar na fila %d: \n", var);
		scanf("%s",t.placa);
		inserir(primeira_fila,t);
		printf("Foi adicionado um carro na primeira fila \n");
	}
	if(var==2){		
		printf("Digite a placa do carro que deseja colocar na fila %d: \n", var);
		scanf("%s",t.placa);
		inserir(segunda_fila,t);
		printf("Foi adicionado um carro na fila2\n");
	}
}
void imprimir_transito(t_fila * fila1,t_fila * fila2,bool sinal1,bool sinal2){
	printf("Numero de carros na primeira fila: [%d]\n",fila1->quant_element);
	printf("Numero de carros na segunda fila: [%d]\n",fila2->quant_element);
	if(sinal1){
		printf("Sinal1 esta aberto\n");
	}else{
		printf("Sinal1 esta fechado\n");
	}
	if(sinal2){
		printf("Sinal2 esta aberto\n");
	}else{
		printf("Sinal2 esta fechado\n");
	}
}

int main (){
	printf("WENDELL HENRIQUE DA SILVA MORAIS\nDISCIPLINA: ESTRUTURA DE DADOS I \nPROFESSOR: WALACE BONFIM \n");
	int i=0;
	int numero;	
	bool primeiro_sinal=false, segundo_sinal=true, err=true;
	while(true){
		
		i++;
		
		
		srand(time(NULL));		
		
		
		if(i==10){	
		primeiro_sinal = !primeiro_sinal;
		segundo_sinal = !segundo_sinal;
		i=0;
		}
		
		if(err==true)numero = rand() % 2;
		err=true;		
		inserir_carro(numero);
		imprimir_transito(primeira_fila,segunda_fila,primeiro_sinal,segundo_sinal);
		if(primeiro_sinal==true){
			remover(primeira_fila);
			printf("Foi removido um carro da primeira fila\n");
		}
		if(segundo_sinal==true){
			remover(segunda_fila);
			printf("Foi removido um carro da segunda fila\n");
		}
		
		if(numero==0){
		numero = 1 + rand() % 2;
		err=false;	
		}		
	}
}
